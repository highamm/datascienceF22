---
title: "Untitled"
format: html
---

## Section 9.1: Change Factor Levels

```{r}
library(tidyverse)
library(here)
pokemon_df <- read_csv(here("data/pokemon_allgen.csv")) |>
  mutate(Generation_cat = factor(Generation))
pokemon_df |> group_by(`Type 1`) |>
  summarise(counttype = n())
pokemon_legend <- pokemon_df |> filter(Legendary == TRUE) |>
  group_by(Generation_cat) |>
  summarise(nlegend = n())
ggplot(data = pokemon_legend, aes(x = Generation_cat, y = nlegend)) +
  geom_col()
pokemon_legend <- pokemon_legend |>
  mutate(Generation_cat2 = fct_recode(Generation_cat, Kanto = "1",
                                      Johto = "2", Hoenn = "3",
                                      Sinnoh = "4", Unova = "5",
                                      Kalos = "6")) |>
  select(Generation_cat2, everything())
head(pokemon_legend)
ggplot(data = pokemon_legend,
       aes(x = Generation_cat2, y = nlegend)) +
  geom_col()
pokemon_long <- pokemon_df |> pivot_longer(c(`Type 1`, `Type 2`),
                            names_to = "Number",
                            values_to = "Type")
pokemon_long |>
  mutate(new_type = fct_collapse(Type, Coolest = c("Ice", "Dark"),
                                 Least_Cool = c("Fire", "Fighting", "Poison"))) |>
  select(new_type, Type, everything())
## factor lvels that are not specified do not change
```

9.1.3: Exercises 1 through 3

```{r}
## exercise 1
## could use mutate() with case_when()
## advantage of fct_collapse() is shorter, easier to read 
## syntax

## exercise 2
view(pokemon_df)
pokemon_df |> group_by(`#`) |> slice(1)
## pokemon_df |> filter(is_default == 1)

## keep rows with a distinct `#` value
pokemon_df |> distinct(`#`, .keep_all = TRUE)

## skip exercise 3
```

Section 9.2: Re-ordering Factor levels

```{r}

pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1) |>
  ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")
pokemon_sum <- pokemon_long |>
  group_by(Type) |>
  summarise(count_type = n()) |>
  filter(!is.na(Type))
ggplot(data = pokemon_sum, aes(x = Type,
                               y = count_type)) +
  geom_col() +
  coord_flip()  ## flips the x and y axes
pokemon_sum <- pokemon_sum |> 
  mutate(Type_ordered = fct_reorder(.f = Type, .x = count_type))
ggplot(data = pokemon_sum, aes(x = Type_ordered,
                               y = count_type)) +
  geom_col() +
  coord_flip()
ggplot(data = pokemon_sum, aes(x = Type_ordered,
                               y = count_type)) +
  geom_segment(aes(x = Type_ordered, xend = Type_ordered,
                   y = 0, yend = count_type)) +
  geom_point() +
  coord_flip()

pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = median))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip()
pokemon_med <- pokemon_long |> group_by(Type_Deford) |>
  summarise(med_def = median(Defense)) |>
  mutate(Type_Deford = fct_reorder(.f = Type_Deford, .x = med_def,
                                   .fun = median))

ggplot(data = pokemon_med, aes(x = med_def, y = Type_Deford)) +
  geom_point()

ggplot(data = pokemon_med, aes(x = Type_Deford, y = med_def)) +
  geom_segment(aes(xend = Type_Deford, y = 0, yend = med_def)) +
  geom_point() +
  coord_flip()
## for a quantitative variable (like defense),
## the boxplots are probably the best beccause they
## how the variability and the shape of defense for each type
```

Exercise 9.2.5 Exercise 1
```{r}
pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1)  |>
   ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")

## exercise 2
pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = max))
## because the data set has groups and usually 
## these forcats functions do not make sense on grouped data
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip()
```



mortality_df <- read_csv(here("data/gun_violence_us.csv")) |>
  mutate(region = factor(region))
ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region)) +
  geom_point() +
  geom_smooth(method = "lm")
mortality_df <- mortality_df |>
  mutate(region_2 = fct_reorder2(region,
                                 .x = ownership_rate,
                                 .y = mortality_rate))
ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region_2)) +
  geom_point() +
  geom_smooth(method = "lm")
mortality_df <- mortality_df |>
  mutate(region_3 = fct_relevel(region, c("South", "West", "MW", "NE")))
ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region_3)) +
  geom_point() +
  geom_smooth(method = "lm")
mod <- lm(mortality_rate ~ ownership_rate + region, data = mortality_df)
mod2 <- lm(mortality_rate ~ ownership_rate + region_2, data = mortality_df)
mod3 <- lm(mortality_rate ~ ownership_rate + region_3, data = mortality_df)
summary(mod)
summary(mod2)
summary(mod3)
```