---
title: "Wrangling with dplyr"
format: html
---

## Section 4.1: New Variables with `mutate()`

```{r}
library(babynames)
head(babynames)
library(tidyverse)
slumajors_df <- read_csv("data/SLU_Majors_15_19.csv")
slumajors_df
slumajors_df |> mutate(ntotal = nfemales + nmales)
slumajors_df |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))

slumajors_df <- slumajors_df |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))
slumajors_df <- slumajors_df |> mutate(ntotal = nfemales + nmales)

slumajors_df <- slumajors_df |>
  mutate(ntotal = nfemales + nmales) |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))
slumajors_df |> mutate(morewomen = if_else(percfemale > 50,
                                            true = "Yes",
                                            false = "No"))
slumajors_df |> mutate(large_majority =
                          case_when(percfemale >= 70 ~ "female",
                                    percfemale <= 30 ~ "male",
                                    percfemale > 30 & percfemale < 70 ~ "none")) 
slumajors_df <- slumajors_df |>
  mutate(morewomen = if_else(percfemale > 50,
                             true = "Yes",
                             false = "No")) |>
  mutate(large_majority =
           case_when(percfemale >= 70 ~ "female",
                     percfemale <= 30 ~ "male",
                     percfemale > 30 & percfemale < 70 ~ "none"))
```

Exercises 4.1.2

```{r}
## 2

## 3
slumajors_df |> 
  mutate(majors_size2 =
           case_when(ntotal >= 150 ~ "large",
                     ntotal <= 40 ~ "small",
                     TRUE ~ "medium"))

## 4
## no straightforward solution, might consider who our target
## audience is for the analysis

## 5

```

## Section 4.2: `arrange()`, `slice()`, `filter()`, and `select()`

```{r}

slumajors_df |> arrange(percfemale)
slumajors_df |> arrange(desc(percfemale))
slumajors_df |> select(Major, ntotal)
slumajors_df |> select(-ntotal, -nfemales, -nmales)
slumajors_df |> mutate(propfemale = percfemale / 100) |>
  select(propfemale, everything())

## STOP
slumajors_df |> arrange(desc(ntotal)) |>
  slice(1, 2, 3, 4, 5)
library(babynames)
babynames
babynames |> filter(name == "Matthew") ## keep rows with Matthew
babynames |> filter(year >= 2000) ## keep rows with babies 2000 or later
babynames |> filter(sex != "M") ## keeps rows where sex is not male
babynames |> filter(prop > 0.05) ## keep rows names with prop more than 0.05
babynames |> filter(year == max(year)) ## keep rows only in the latest (largest) year


## keeps rows where n is more than 20000 or where prop is more than 0.05
babynames |> filter(n > 20000 | prop > 0.05)
## keeps rows with female Mary's
babynames |> filter(sex == "F" & name == "Mary")

## keeps rows with female mary's where the proportion of 
## babies born Mary is also more than 0.05
babynames |> filter(sex == "F" & name == "Mary" & prop > 0.05)
```


Exercises 4.2.4

```{r}
## exercise 4

## make and name a new data set with only our name (with filter)
babynames_matthew <- babynames |> filter(sex == "F" & name == "Emma")
ggplot(data = babynames_matthew, aes(x = year, y = n)) +
  geom_line()

## ggplot() and geom_line() to make a line plot of popularity

## exercise 3
babynames |> filter(sex == "M" & year == 2017) |>
  arrange(desc(n)) |>
  slice(1:10)

## method 2: mutate() with rank(), then filter(), then arrange()
 ## example of rank
babynames |> filter(sex == "M" & year == 2017) |>
  mutate(rank_birth = rank(desc(n))) |>
  filter(rank_birth <= 10)
```

## Section 4.3: `summarise()` and `group_by()`

```{r}
slumajors_df |>
  summarise(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal))
babynames |> group_by(year) |>
  summarise(totalbirths = sum(n))
babynames |> summarise(totalobs = n())
babynames |> group_by(year) |>
  summarise(ngroup = n())

```

Exercises 4.3.2

```{r}

## wexercise 1
slumajors_df |>
  summarise(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) 
## makes a new data frame with just a single row (per gruop)
slumajors_df |>
  mutate(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) |>
  select(meantotalmajor, totalgrad, everything())
## mutate() adds a new column for the new variables created:
## it keeps the same number of rows 

## exercise 2
babynames_total <- babynames |> group_by(year) |>
  summarise(ngroup = n())
ggplot(data = babynames_total, aes(x = year, y = ngroup)) +
  geom_line()
## ngroup corresponds to the number of names in each year
## so there have been more and more unique names as time has
## gone on

## exercise 3
babynames |> group_by(name) |>
  summarise(total_births = sum(n))

## exercise 4
babynames |> group_by(year, sex) |>
  mutate(rank_name = rank(desc(n))) 

## exercise 5
babynames |> group_by(year, sex) |>
  mutate(rank_name = rank(desc(n))) |>
  filter(rank_name == 1) |>
  group_by(name) |>
  summarise(n_appearances = n()) |>
  arrange(desc(n_appearances))

## exercise 6

babynames_test <- babynames |>
  group_by(year, sex) |> mutate(ntest = n / prop)
babynames_test |> ungroup() |> slice(1, 2, 3, 4, 5)
## if the data is grouped, slice(1:5) returns the first 
## rows from each group
```

## Section 4.4: Missing Values

```{r}
toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
toy_df


toy_df |> mutate(x_add = x / y) ## new variable gets NA
toy_df |> arrange(x)
toy_df |> arrange(desc(x)) ## NAs get sorted last
toy_df |> filter(x < 5) ## gets rid of NA
toy_df |> summarise(min_x = min(x)) ## NA gets returned
toy_df |> group_by(z) |>
  summarise(mean_x = mean(x))
## for any group where x is missing, an NA is returned
## for groups with non-missing x's, the mean is computed
toy_df |> summarise(meanx = mean(x, na.rm = TRUE))


toy_df |> mutate(missingx = is.na(x))
toy_df |> filter(is.na(x) != TRUE)
toy_df |> filter(!is.na(x))
```

## Section 4.5: More About the Pipe

```{r}
videogame_df <- read_csv("data/videogame_clean.csv")
videogame_df |> filter(!is.na(metascore))
filter(videogame_df, !is.na(metascore))
videogame_df |> filter(!is.na(metascore)) |>
  filter(median_playtime > 0) |>
  group_by(price_cat) |>
  summarise(avg_med_time = median(median_playtime, na.rm = TRUE))
filter(videogame_df, !is.na(metascore))
filter(filter(videogame_df, !is.na(metascore)), median_playtime > 0)
group_by(filter(filter(videogame_df, !is.na(metascore)),
                median_playtime > 0), price_cat)
summarise(group_by(filter(filter(videogame_df, !is.na(metascore)),
  median_playtime > 0), price_cat), 
  avg_med_time = median(median_playtime, na.rm = TRUE))
## piping allows us to read code from left-to right. top to bottom
## if we don't use the pipe, we have to read our functions 
## from the inside to the outside, which is harder

```

## Chapter Exercises

```{r}
## 2 and 3 (for now)
babynames_5 <- babynames |> filter(name == "Matthew" | name == "Jessica" |
                      name == "Robin" | name == "Michael" |
                      name == "Ivan")
babynames_5sum <- babynames_5 |> group_by(name, year) |>
  summarise(n_total = sum(n))
ggplot(data = babynames_5sum, aes(x = year, y = n_total,
                                  colour = name)) +
  geom_line()

## 3
babynames_91m <- babynames |> filter(year == 1991 & sex == "M") |>
  mutate(rank_name = rank(desc(n))) |>
  slice(1:10)
babynames_91m
ggplot(data = babynames_91m, aes(x = name, y = n)) +
  geom_col()

ggplot(data = babynames_91m, aes(x = fct_reorder(name, n), y = n)) +
  geom_col() +
  coord_flip()

## exercise 4
## mutate: safe to keep the same name: we are only adding a
## variable to the data set (all other variables are kept)

## arrange: safe: just reordering rows 

## filter: generally not safe to use the same name unless
## you are SURE you will never use the rows you delete

## summarise: generally unsafe: you no lonber would have 
## access to the original data

## select: generally not safe unless you are SURE you will 
## never use the columns you delete

```

