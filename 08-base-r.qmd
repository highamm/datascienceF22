---
title: "Section 8"
format: html
---

```{r}
library(tidyverse)
library(here)
videogame_df <- read_csv(here("data/videogame_clean.csv"))
head(videogame_df)
videogame_small <- videogame_df |> slice(1:100)
ggplot(data = videogame_small, aes(x = release_date, y = price)) +
  geom_point() 

ggplot(data = videogame_small, aes(x = release_date2, y = metascore)) +
  geom_point(aes(colour = price_cat))
head(videogame_df)
videogame_df$game
str(videogame_df$game)
class(videogame_df$game)
mean(videogame_df$game)
videogame_df |> summarise(maxgame = max(game))
class(videogame_df$meta_cat)
class(as.factor(videogame_df$meta_cat))
videogame_df <- videogame_df |>
  mutate(meta_cat_factor = as.factor(meta_cat))
str(videogame_df$meta_cat_factor)
str(videogame_df$release_date)
str(videogame_df$release_date2)
median(videogame_df$release_date2, na.rm = TRUE)
mean(videogame_df$release_date2, na.rm = TRUE)
str(videogame_df$price)
str(videogame_df$price_cat)
str(as.factor(videogame_df$price_cat))
videogame_df <- videogame_df |>
  mutate(price_factor = as.factor(price_cat)) 
ggplot(data = videogame_df, aes(x = release_date2, y = metascore)) +
  geom_point(aes(colour = price_factor))
str(videogame_df$playtime_miss)
sum(videogame_df$playtime_miss)
mean(videogame_df$playtime_miss)
```

## Section 8.3: Object Types and Subsetting

```{r}
str(videogame_df) ## look at the beginning to see "tibble"
videogame_df[5, 3]
videogame_df[ ,3] ## grab the third column

videogame_df[5, ] ## grab the fifth row
3:7

videogame_df[ ,3:7] ## grab columns 3 through 7

videogame_df[3:7, ] ## grab rows 3 through 7

videogame_df[ ,c(1, 3, 4)] ## grab columns 1, 3, and 4
videogame_df |> select(c(1, 3, 4))

videogame_df[c(1, 3, 4), ] ## grab rows 1, 3, and 4
videogame_df |> slice(c(1, 3, 4))


vec1 <- c(1, 3, 2)
vec2 <- c("b", 1, 2)
vec3 <- c(FALSE, FALSE, TRUE)
str(vec1); str(vec2); str(vec3)
videogame_df$metascore
metavec <- videogame_df$metascore
mean(metavec, na.rm = TRUE)

videogame_df |>
  summarise(mean_meta = mean(metascore, na.rm = TRUE))

metavec[100] ## 100th element is missing

## SKIP lists
testlist <- list("a", 4, c(1, 4, 2, 6),
                 tibble(x = c(1, 2), y = c(3, 2)))
testlist
```

8.3.4 Exercises 1, 2, 3, 4

```{r}
## 1
## slice for rows and select for columns

## 2
library(tidyverse)
fitness_df <- read_csv(here("data/higham_fitness_notclean.csv"))
fitness_df[894:993, ]
fitness_df |> slice(894:993)

fitness_df |> arrange(desc(Start)) |> slice(1:100)
## can also use nrow()

fitness_df[ ,-4]
fitness_df |> select(-flights)

## 4
weekday_vec <- 2:6
weekend_vec <- c(1, 7)

fitness_df |>
  mutate(weekend_ind = case_when(weekday %in% weekday_vec ~ "schoolday",
                                 weekday %in% weekend_vec ~ "weekend")) |>
  select(weekend_ind, weekday, everything())
```

```{r}
set.seed(15125141)
toy_df <- tibble(xvar = rnorm(100, 3, 4),
                 yvar = rnorm(100, -5, 10),
                 group1 = sample(c("A", "B", "C"), size = 100, replace = TRUE),
                 group2 = sample(c("Place1", "Place2", "Place3"), size = 100,
                                 replace = TRUE))
toy_df
table(toy_df$group1)
## recreate with dplyr and tidyr
toy_df |> group_by(group1) |>
  summarise(n_count = n()) |>
  pivot_wider(values_from = n_count, names_from = group1)

table(toy_df$group1, toy_df$group2)
toy_df |> group_by(group1, group2) |>
  summarise(n_count = n()) |>
  pivot_wider(values_from = n_count, names_from = group2)
## recreate with dplyr and tidyr


nrow(toy_df) ## get number of rows of a data frame or tibble
summary(toy_df$yvar) ## get some summary stats for a vector

toy_df
toy_df |>
  print(n = 60) ## print out 60 rows
toy_df |>
  print(width = Inf) ## print out all of the columns

fitness_df |>
  print(width = Inf)
```

Skipping Chapter Exercises